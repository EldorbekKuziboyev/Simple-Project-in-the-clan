import asyncio
import os
import subprocess
from celery import shared_task
from django.db import transaction
from movies.models import Movie
from aiogram import Bot
from aiogram.types import FSInputFile
from django.core.exceptions import ObjectDoesNotExist

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞
TOKEN = "7593798870:AAGCPzzkKBdBjHS_dY0851eoXjbuQ4AJ3Rs"
CHAT_ID = -1002359210651  # ID Telegram-–∫–∞–Ω–∞–ª–∞
MAX_TG_FILE_SIZE = 2 * 1024 * 1024 * 1024  # 2 –ì–ë
COMPRESSION_THRESHOLD = 50 * 1024 * 1024  # 50 –ú–ë

def run_async(coro):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ event loop –≤ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        return loop.run_until_complete(coro)
    finally:
        loop.close()

async def send_video(video_path, thumbnail_path, caption):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –≤ Telegram —Å –º–∏–Ω–∏–∞—Ç—é—Ä–æ–π"""
    bot = Bot(token=TOKEN)
    try:
        video = FSInputFile(video_path)
        thumbnail = FSInputFile(thumbnail_path) if thumbnail_path else None
        return await bot.send_video(
            chat_id=CHAT_ID,
            video=video,
            caption=caption or "üé¨ –ù–æ–≤—ã–π —Ñ–∏–ª—å–º!",
            thumbnail=thumbnail
        )
    finally:
        await bot.session.close()

async def send_video_by_file_id(file_id, caption):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –ø–æ file_id"""
    bot = Bot(token=TOKEN)
    try:
        return await bot.send_video(chat_id=CHAT_ID, video=file_id, caption=caption or "üé¨ –ù–æ–≤—ã–π —Ñ–∏–ª—å–º!")
    finally:
        await bot.session.close()

def get_file_size(file_path):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö"""
    return os.path.getsize(file_path) if os.path.exists(file_path) else 0

def compress_video(input_path):
    """–°–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é ffmpeg"""
    output_path = input_path.replace(".mp4", "_compressed.mp4")
    command = [
        "ffmpeg", "-i", input_path,
        "-vcodec", "libx264", "-crf", "28",
        "-preset", "fast", output_path,
        "-y"  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ñ–∞–π–ª
    ]
    subprocess.run(command, check=True)
    return output_path if os.path.exists(output_path) else None

@shared_task(bind=True, max_retries=None)
def send_movie_to_channel(self, movie_id):
    """Celery-–∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–ª—å–º–∞ –≤ Telegram, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è"""
    try:
        movie = Movie.objects.get(id=movie_id)
    except ObjectDoesNotExist:
        print(f"‚ö†Ô∏è –§–∏–ª—å–º —Å ID {movie_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏.")
        return

    caption = f"üé¨ {movie.title}" if movie.title else "üé¨ –ù–æ–≤—ã–π —Ñ–∏–ª—å–º!"
    thumbnail_path = movie.thumbnail.path if movie.thumbnail else None

    if not movie.video_file:
        print("‚ö†Ô∏è –ù–µ—Ç –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return

    video_path = movie.video_file.path
    file_size = get_file_size(video_path)

    if file_size > MAX_TG_FILE_SIZE:
        print(f"‚ùå –§–∞–π–ª {video_path} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size / (1024 * 1024)} –ú–ë) –¥–ª—è Telegram.")
        return

    if file_size > COMPRESSION_THRESHOLD:
        print(f"üìâ –°–∂–∏–º–∞–µ–º –≤–∏–¥–µ–æ {video_path}, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –±–æ–ª—å—à–µ {COMPRESSION_THRESHOLD / (1024 * 1024)} –ú–ë...")
        compressed_path = compress_video(video_path)
        if compressed_path:
            video_path = compressed_path
            print(f"‚úÖ –í–∏–¥–µ–æ —Å–∂–∞—Ç–æ: {video_path}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ –≤–∏–¥–µ–æ.")
            return

    try:
        if movie.file_id:
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ file_id...")
            run_async(send_video_by_file_id(movie.file_id, caption))
        else:
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª...")
            message = run_async(send_video(video_path, thumbnail_path, caption))
            if message and message.video:
                with transaction.atomic():
                    movie.file_id = message.video.file_id
                    movie.save()
                    print(f"‚úÖ –ù–æ–≤—ã–π file_id —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {movie.file_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        send_movie_to_channel.apply_async(args=[movie_id], countdown=10)
