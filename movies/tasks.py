import asyncio
import os
import logging
from celery import shared_task
from django.db import transaction
from moviepy import VideoFileClip

from movies.models import Movie
from django.core.exceptions import ObjectDoesNotExist
from telethon import TelegramClient
from telethon.tl.types import DocumentAttributeVideo

logger = logging.getLogger(__name__)

API_ID = 24215300
API_HASH = "6ddc7ef111971e216873fb162d01bdfa"
CHAT_ID = -1002359210651
MAX_TG_FILE_SIZE = 2 * 1024 * 1024 * 1024
SESSION_NAME = "session_name"

client = TelegramClient(SESSION_NAME, API_ID, API_HASH)

def run_async(coro):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ event loop –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ"""
    loop = asyncio.get_event_loop()
    try:
        return loop.run_until_complete(coro)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
        raise

async def start_client():
    """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ Telethon"""
    if not client.is_connected():
        await client.start()

def get_video_metadata(video_path):
    clip = VideoFileClip(video_path)
    duration = clip.duration
    width, height = clip.size
    clip.close()
    return duration, width, height

async def send_video(video_path, caption):
    await client.start()
    duration, width, height = get_video_metadata(video_path)
    fixed_width = 1280
    fixed_height = 720
    attributes = [DocumentAttributeVideo(duration=duration, w=fixed_width, h=fixed_height)]
    return await client.send_file(
        CHAT_ID,
        video_path,
        caption=caption or "üé¨ –ù–æ–≤—ã–π —Ñ–∏–ª—å–º!",
        attributes=attributes,
        supports_streaming=True
    )


async def send_video_by_file_id(file_id, caption, video_path):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –ø–æ file_id —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º moviepy –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    await start_client()

    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
    duration, width, height = get_video_metadata(video_path)

    # –£–∫–∞–∑—ã–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –≤–∏–¥–µ–æ
    attributes = [DocumentAttributeVideo(duration=duration, w=width, h=height)]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
    return await client.send_file(
        CHAT_ID,
        file=file_id,
        caption=caption or "üé¨ –ù–æ–≤—ã–π —Ñ–∏–ª—å–º!",
        attributes=attributes,
        supports_streaming=True
    )

def get_file_size(file_path):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return os.path.getsize(file_path)

@shared_task(bind=True, max_retries=3)
def send_movie_to_channel(self, movie_id):
    """Celery-–∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–ª—å–º–∞ –≤ Telegram"""
    try:
        movie = Movie.objects.get(id=movie_id)
    except ObjectDoesNotExist:
        logger.error(f"‚ö†Ô∏è –§–∏–ª—å–º —Å ID {movie_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    caption = f"üé¨ {movie.title_en}" if movie.title_en else "üé¨ –ù–æ–≤—ã–π —Ñ–∏–ª—å–º!"

    if not movie.video_file:
        logger.error("‚ö†Ô∏è –ù–µ—Ç –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return

    video_path = movie.video_file.path
    try:
        file_size = get_file_size(video_path)
    except FileNotFoundError as e:
        logger.error(f"‚ùå {e}")
        return

    if file_size > MAX_TG_FILE_SIZE:
        logger.error(f"‚ùå –§–∞–π–ª {video_path} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size / (1024 * 1024)} –ú–ë) –¥–ª—è Telegram.")
        return

    try:
        if movie.file_id:
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ file_id...")
            message = run_async(send_video_by_file_id(movie.file_id, caption))
        else:
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ—Ñ–∞–π–ª...")
            message = run_async(send_video(video_path, caption))

            if message and message.media:
                with transaction.atomic():
                    movie.file_id = message.id
                    movie.save()
                    logger.info(f"‚úÖ –ù–æ–≤—ã–π file_id —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {movie.file_id}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        self.retry(exc=e, countdown=10)